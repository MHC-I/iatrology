<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Aria2配置ssl并通过frp映射aria rpc</title>
    <link href="/2021/02/20/Aria2%E9%85%8D%E7%BD%AEssl%E5%B9%B6%E9%80%9A%E8%BF%87frp%E6%98%A0%E5%B0%84aria-rpc/"/>
    <url>/2021/02/20/Aria2%E9%85%8D%E7%BD%AEssl%E5%B9%B6%E9%80%9A%E8%BF%87frp%E6%98%A0%E5%B0%84aria-rpc/</url>
    
    <content type="html"><![CDATA[<p>当AriaNg通过https访问时，ariarpc会强制要求通过https或websocket连接，这时候就需要给aria2配置ssl来开启https访问。</p><h2 id="创建Https隧道，申请ssl证书"><a href="#创建Https隧道，申请ssl证书" class="headerlink" title="创建Https隧道，申请ssl证书"></a>创建Https隧道，申请ssl证书</h2><p>我是使用的是natfrp创建隧道，创建完通过dnspods将域名解析到natfrp，顺便通过dnspods申请ssl证书</p><h2 id="Aria配置ssl证书"><a href="#Aria配置ssl证书" class="headerlink" title="Aria配置ssl证书"></a>Aria配置ssl证书</h2><p>1.将dnspods申请的或者其他地方申请的证书下载下来，应该有如下一些文件，我们需要的是Nginx目录下的文件</p><img src="/2021/02/20/Aria2%E9%85%8D%E7%BD%AEssl%E5%B9%B6%E9%80%9A%E8%BF%87frp%E6%98%A0%E5%B0%84aria-rpc/1.%E4%B8%8B%E8%BD%BD%E8%AF%81%E4%B9%A6.png" class="" title="1.下载证书"><p>2.将nginx目录下的两个文件放到aria2的目录，或者其他自己能够找到的地方</p><p>3.找到<code>aria2.conf</code>文件，我是通过脚本安装的，文件在<code>/root/.aria2c/</code>目录下，找到如下内容，这是修改之后的内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># RPC 服务 SSL/TLS 加密, 默认：false</span><br><span class="hljs-comment"># 启用加密后必须使用 https 或者 wss 协议连接</span><br><span class="hljs-attr">rpc-secure</span>=<span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 在 RPC 服务中启用 SSL/TLS 加密时的证书文件(.pem/.crt)</span><br><span class="hljs-attr">rpc-certificate</span>=/root/.aria2c/ariarpc.crt<br><br><span class="hljs-comment"># 在 RPC 服务中启用 SSL/TLS 加密时的私钥文件(.key)</span><br><span class="hljs-attr">rpc-private-key</span>=/root/.aria2c/ariarpc.key<br></code></pre></td></tr></table></figure><p>⚠️注意：<code>rpc-certificate=/root/.aria2c/ariarpc.crt</code>aria2c.conf中默认的后缀是<code>.pem</code>但是Nginx里的是<code>.crt</code>，所以这里需要修改为<code>.crt</code></p><p>4.修改完成后，重启一下Aria，启动成功说明这里的配置基本没问题了，失败的话注意检查前面的两个文件是否已经放上去，conf里填的路径是否正确</p><h2 id="配置Frp"><a href="#配置Frp" class="headerlink" title="配置Frp"></a>配置Frp</h2><p>1.创建frp隧道</p><img src="/2021/02/20/Aria2%E9%85%8D%E7%BD%AEssl%E5%B9%B6%E9%80%9A%E8%BF%87frp%E6%98%A0%E5%B0%84aria-rpc/2.%E5%88%9B%E5%BB%BA%E9%9A%A7%E9%81%93.png" class="" title="2.创建隧道"><p>注意本地端口是6800</p><p>2.创建完成后需要启动隧道，详细看natfrp的帮助文档</p><p>3.将绑定的域名解析到frp上</p><p>4.配置AriaNg</p><img src="/2021/02/20/Aria2%E9%85%8D%E7%BD%AEssl%E5%B9%B6%E9%80%9A%E8%BF%87frp%E6%98%A0%E5%B0%84aria-rpc/3.ariang.png" class="" title="3.ariang"><p>配置完证书之后可以使用websocket协议也可以使用https协议，需要注意连接到端口为443</p>]]></content>
    
    
    
    <tags>
      
      <tag>Aria2</tag>
      
      <tag>Frp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下文件的解压缩</title>
    <link href="/2021/02/20/Linux%E4%B8%8B%E6%96%87%E4%BB%B6%E7%9A%84%E8%A7%A3%E5%8E%8B%E7%BC%A9/"/>
    <url>/2021/02/20/Linux%E4%B8%8B%E6%96%87%E4%BB%B6%E7%9A%84%E8%A7%A3%E5%8E%8B%E7%BC%A9/</url>
    
    <content type="html"><![CDATA[<h2 id="tar压缩文件"><a href="#tar压缩文件" class="headerlink" title="tar压缩文件"></a>tar压缩文件</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">tar -zcvf <span class="hljs-selector-attr">[name]</span><span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> ./<span class="hljs-selector-attr">[name]</span>/<br></code></pre></td></tr></table></figure><p>该命令表示压缩当前路径下的文件夹[name]，压缩后命名为[name].tar.gz</p><p>如果不需要压缩成gz，只需要后缀为tar格式的，那么只需输入</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">tar -zcvf <span class="hljs-selector-attr">[name]</span><span class="hljs-selector-class">.tar</span> ./<span class="hljs-selector-attr">[name]</span>/<br></code></pre></td></tr></table></figure><h2 id="tar解压文件"><a href="#tar解压文件" class="headerlink" title="tar解压文件"></a>tar解压文件</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">tar -xzvf <span class="hljs-selector-attr">[name]</span><span class="hljs-selector-class">.tar</span>.gz<br></code></pre></td></tr></table></figure><p>该命令表示把[name].tar.gz的文件解压到当前文件夹下</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo通过Git部署到服务器</title>
    <link href="/2021/02/19/hexo%E9%80%9A%E8%BF%87git%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <url>/2021/02/19/hexo%E9%80%9A%E8%BF%87git%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="目的："><a href="#目的：" class="headerlink" title="目的："></a>目的：</h2><ul><li>通过hexo生成网页</li><li>在服务器上搭建git仓库，并将静态文件通过git上传到云主机</li><li>使用git-hooks实现自动部署</li></ul><h2 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h2><h3 id="1-安装git"><a href="#1-安装git" class="headerlink" title="1.安装git"></a>1.安装git</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> git <span class="hljs-comment">#centos</span><br>apt <span class="hljs-keyword">install</span> git <span class="hljs-comment">#ubuntu</span><br></code></pre></td></tr></table></figure><h3 id="2-添加一个git用户"><a href="#2-添加一个git用户" class="headerlink" title="2.添加一个git用户"></a>2.添加一个git用户</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">adduser git   <span class="hljs-comment">#添加git用户</span><br>$ chmod <span class="hljs-number">740</span> <span class="hljs-regexp">/etc/</span>sudoers   <span class="hljs-comment">#改变sudoers文件的权限为文件所有者可写</span><br>$ vim <span class="hljs-regexp">/etc/</span>sudoers   <span class="hljs-comment">#vim编辑sudoers</span><br></code></pre></td></tr></table></figure><p>找到<code>root ALL=(ALL) ALL</code>，在它下方加入一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">git ALL=(ALL) ALL<br></code></pre></td></tr></table></figure><img src="/2021/02/19/hexo%E9%80%9A%E8%BF%87git%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/1.%E4%BF%AE%E6%94%B9sudoers.png" class="" title="1.修改sudoers"><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">chmod <span class="hljs-number">400</span> <span class="hljs-regexp">/etc/</span>sudoers   <span class="hljs-comment">#将其权限修改为文件所有者可读</span><br>$ sudo passwd git  <span class="hljs-comment">#设置git用户的密码</span><br></code></pre></td></tr></table></figure><h3 id="3-创建git仓库并使用git-hooks实现自动部署"><a href="#3-创建git仓库并使用git-hooks实现自动部署" class="headerlink" title="3.创建git仓库并使用git-hooks实现自动部署"></a>3.创建git仓库并使用git-hooks实现自动部署</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ sudo mkdir <span class="hljs-regexp">/var/</span>repo    <span class="hljs-comment">#新建目录，这是git仓库的位置</span><br>$ sudo mkdir <span class="hljs-regexp">/www/</span>wwwroot/blog    <span class="hljs-comment">#这是博客源文件的目录</span><br>$ cd <span class="hljs-regexp">/var/</span>repo  <span class="hljs-comment">#转到git仓库的文件夹</span><br>$ sudo git init --bare blog.git <span class="hljs-comment">#创建一个名叫blog的仓库</span><br>$ sudo vim <span class="hljs-regexp">/var/</span>repo<span class="hljs-regexp">/blog.git/</span>hooks/post-update<br></code></pre></td></tr></table></figure><p>增加下面两行，当我们从本地push上去时，git-hooks会自动执行下列命令，这是git自带的的方法，表示在<code>/var/repo/blog.git</code>中对<code>/www/wwwroot/blog</code>执行<code>checkout -f</code>命令，可以在我们每次 push 完之后，把部署目录更新到博客的最新状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>git --work-tree=/www/wwwroot/blog --git-dir=/var/repo/blog.git checkout -f<br></code></pre></td></tr></table></figure><h3 id="4-修改权限"><a href="#4-修改权限" class="headerlink" title="4.修改权限"></a>4.修改权限</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ cd blog.git<span class="hljs-regexp">/hooks/</span><br>$ sudo chown -R git:git <span class="hljs-regexp">/var/</span>repo/      <span class="hljs-comment">#进行文件夹及其子文件所有者变更为git</span><br>$ sudo chown -R git:git <span class="hljs-regexp">/www/</span>wwwroot/blog  <span class="hljs-comment">#进行文件夹及其子文件所有者变更为git</span><br>$ sudo chmod +x post-update  <span class="hljs-comment">#赋予post-update可执行权限</span><br></code></pre></td></tr></table></figure><h2 id="创建静态页面"><a href="#创建静态页面" class="headerlink" title="创建静态页面"></a>创建静态页面</h2><p>两种方法可选</p><p>1.使用宝塔面板创建一个静态站点，将网站根目录修改为<code>/www/wwwroot/blog</code>即可</p><img src="/2021/02/19/hexo%E9%80%9A%E8%BF%87git%E9%83%A8%E7%BD%B2%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%99%A8/2.%E4%BF%AE%E6%94%B9%E7%AB%99%E7%82%B9%E7%9B%AE%E5%BD%95.png" class="" title="2.修改站点目录"><p>2.直接修改nginx配置文件，参考原文章(未进行测试)</p><h2 id="修改hexo配置文件"><a href="#修改hexo配置文件" class="headerlink" title="修改hexo配置文件"></a>修改hexo配置文件</h2><p>找到文件<code>/hexo/_config.yml</code></p><p>在最后面找到<code>deploy:</code>修改为</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">deploy:</span><br>  <span class="hljs-symbol">type:</span> git<br>  <span class="hljs-symbol">repo:</span> git<span class="hljs-variable">@192</span>.<span class="hljs-number">168.0</span>.<span class="hljs-number">3</span><span class="hljs-symbol">:/var/repo/blog</span>.git<br>  <span class="hljs-symbol">branch:</span> master<br></code></pre></td></tr></table></figure><p>将<code>192.168.0.3</code>修改为你的服务器地址</p><p>注意：需要打开ssh端口，即22端口</p><p>🔗参考：</p><p><a href="https://zhuanlan.zhihu.com/p/83095214">通过Git将Hexo博客部署到服务器</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu下SMB的搭建</title>
    <link href="/2021/02/19/Ubuntu%E4%B8%8BSMB%E6%90%AD%E5%BB%BA/"/>
    <url>/2021/02/19/Ubuntu%E4%B8%8BSMB%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="安装smba"><a href="#安装smba" class="headerlink" title="安装smba"></a>安装smba</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> insall samba<br></code></pre></td></tr></table></figure><p>（1）如果安装时候遇到</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">E: Unable <span class="hljs-keyword">to</span> fetch <span class="hljs-keyword">some</span> archives, maybe <span class="hljs-built_in">run</span> apt-<span class="hljs-keyword">get</span> update <span class="hljs-keyword">or</span> <span class="hljs-keyword">try</span> <span class="hljs-keyword">with</span> <span class="hljs-comment">--fix-missing</span><br></code></pre></td></tr></table></figure><p>那么执行</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">sudo apt-get <span class="hljs-keyword">update</span> --fix-<span class="hljs-literal">missing</span><br></code></pre></td></tr></table></figure><p>（2）如果安装时遇到</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/dpkg/</span>lock - open (<span class="hljs-number">13</span>: 权限不够)<br></code></pre></td></tr></table></figure><p>那么强制解锁</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo rm <span class="hljs-regexp">/var/</span>cache<span class="hljs-regexp">/apt/</span>archives/lock<br>sudo rm <span class="hljs-regexp">/var/</span>lib<span class="hljs-regexp">/dpkg/</span>lock】<br></code></pre></td></tr></table></figure><p>完成之后再执行</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> insall samba<br></code></pre></td></tr></table></figure><h2 id="创建共享文件夹"><a href="#创建共享文件夹" class="headerlink" title="创建共享文件夹"></a>创建共享文件夹</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">mkdir</span> smb<br><span class="hljs-keyword">chmod</span> <span class="hljs-number">777</span> smb<br></code></pre></td></tr></table></figure><p>这时共享目录的路径为/root/smb，可自行设置</p><h2 id="创建smb账户"><a href="#创建smb账户" class="headerlink" title="创建smb账户"></a>创建smb账户</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sudo smbpasswd -<span class="hljs-selector-tag">a</span> coco<br></code></pre></td></tr></table></figure><p>（命令后会让你输入密码，输入两次，不会显示）</p><h2 id="修改smb配置文件"><a href="#修改smb配置文件" class="headerlink" title="修改smb配置文件"></a>修改smb配置文件</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo vi <span class="hljs-regexp">/etc/</span>samba/smb.conf<br></code></pre></td></tr></table></figure><p>在文件末尾添加</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nix">[samba]<br><span class="hljs-attr">path</span> = /root/smb<br><span class="hljs-attr">available</span> = yes<br><span class="hljs-attr">writeable</span> = yes<br><span class="hljs-attr">security</span> = share<br><span class="hljs-attr">browseable</span> = yes<br>guest <span class="hljs-attr">ok</span> = yes<br>valid <span class="hljs-attr">users</span> = coco<br></code></pre></td></tr></table></figure><p>其中<code>path</code>为刚刚创建的目录，<code>valid users</code>为刚刚创建的smb账户，根据刚刚创建的情况修改</p><h2 id="重启smb服务"><a href="#重启smb服务" class="headerlink" title="重启smb服务"></a>重启smb服务</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo <span class="hljs-regexp">/etc/i</span>nit.d/smbd restart<br></code></pre></td></tr></table></figure><p>🔗参考：</p><p><a href="https://blog.csdn.net/ymj321/article/details/106530259/">Ubuntu（linux)下smb完整搭建流程</a></p><p><a href="https://jingyan.baidu.com/article/3a2f7c2ed314ef26afd611a1.html">Ubuntu下samba配置和使用</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu下deb包的安装与卸载</title>
    <link href="/2021/02/19/Ubuntu%E4%B8%8Bdeb%E5%8C%85%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/"/>
    <url>/2021/02/19/Ubuntu%E4%B8%8Bdeb%E5%8C%85%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E5%8D%B8%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<blockquote><p>deb 格式是 Debian 系统(包含 Debian 和 Ubuntu )专属安装包格式，配合 APT 软件管理系统，成为了当前在 Linux 下非常流行的一种安装包</p><p>– 百度百科</p></blockquote><h2 id="deb包的安装"><a href="#deb包的安装" class="headerlink" title="deb包的安装"></a>deb包的安装</h2><h3 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h3><p>在线安装可使用apt命令</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">apt install [<span class="hljs-keyword">package</span> <span class="hljs-title">name]</span><br></code></pre></td></tr></table></figure><p>若下载速度慢或者无法连接可考虑更换国内源</p><h3 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h3><p>先通过cd进入deb包所在的目录，再使用dpkg命令安装</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sudo dpkg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-attr">[packge name.deb]</span><br></code></pre></td></tr></table></figure><p>但是一般会报错，形如</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">dpkg: dependency problems prevent configuration of youdao-dict：<br><span class="hljs-meta">...</span><br>dpkg: error processing package youdao-dict (--install):<br><span class="hljs-meta">...</span><br></code></pre></td></tr></table></figure><p>这时再通过下面的命令安装依赖(后面不带包名)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-builtin-name">get</span> -f install<br></code></pre></td></tr></table></figure><p>然后再次执行</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sudo dpkg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-attr">[packge name.deb]</span><br></code></pre></td></tr></table></figure><p>这时应该就完成安装了</p><h2 id="deb包的卸载"><a href="#deb包的卸载" class="headerlink" title="deb包的卸载"></a>deb包的卸载</h2><p>（完全卸载，包括配置文件和依赖，以nginx为例子）</p><p>1.删除apt缓存</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> clean<br></code></pre></td></tr></table></figure><p>2.卸载软件包，–purge包括配置文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> --purge <span class="hljs-builtin-name">remove</span> nginx<br></code></pre></td></tr></table></figure><p>3.自动移除全部不使用的软件包</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-builtin-name">get</span> autoremove<br></code></pre></td></tr></table></figure><p>4.列出与nginx相关的软件 并删除显示的软件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">dpkg --get-selections|grep nginx<br><br>sudo apt-<span class="hljs-builtin-name">get</span> --purge <span class="hljs-builtin-name">remove</span> nginx<br>sudo apt-<span class="hljs-builtin-name">get</span> --purge <span class="hljs-builtin-name">remove</span> nginx-common<br>sudo apt-<span class="hljs-builtin-name">get</span> --purge <span class="hljs-builtin-name">remove</span> nginx-core<br></code></pre></td></tr></table></figure><p>5.查看是否卸载干净（卸载干净后应显示为空）</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">dpkg --<span class="hljs-built_in">get</span>-selections|<span class="hljs-keyword">grep</span> nginx<br></code></pre></td></tr></table></figure><p>🔗参考：</p><p><a href="https://www.cnblogs.com/oxspirt/p/9017204.html">Ubuntu 卸载干净软件(包括配置文件)</a></p><p><a href="https://www.cnblogs.com/horizonli/p/5179224.html">dpkg安装deb缺少依赖包的解决方法</a></p><p><a href="https://blog.csdn.net/hebbely/article/details/78521476">Ubuntu下的deb打包、安装与卸载</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决浏览器强行跳转HTTPS</title>
    <link href="/2021/02/10/%E8%A7%A3%E5%86%B3%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%BA%E8%A1%8C%E8%B7%B3%E8%BD%ACHTTPS/"/>
    <url>/2021/02/10/%E8%A7%A3%E5%86%B3%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%BA%E8%A1%8C%E8%B7%B3%E8%BD%ACHTTPS/</url>
    
    <content type="html"><![CDATA[<p>当网站曾经支持https访问，之后由于某些特殊原因只支持http访问时（没错，就是我的网站），浏览器会默认跳转https而导致无法连接，这个时候无论是使用<code>http://mhcii.top</code>还是通过<code>mhcii.top</code>访问都会默认跳转到<code>https://mhcii.top</code></p><img src="/2021/02/10/%E8%A7%A3%E5%86%B3%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%BA%E8%A1%8C%E8%B7%B3%E8%BD%ACHTTPS/1.%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE.png" class="" title="1.无法访问"><h2 id="Safari（Mac）"><a href="#Safari（Mac）" class="headerlink" title="Safari（Mac）"></a>Safari（Mac）</h2><p>1.完全退出Safari</p><p>2.打开终端，输入下面的命令</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">rm  ~<span class="hljs-regexp">/Library/</span>Cookies/HSTS.plist<br></code></pre></td></tr></table></figure><p>3.重启一下电脑</p><h2 id="Safari（iPhone、iPad）"><a href="#Safari（iPhone、iPad）" class="headerlink" title="Safari（iPhone、iPad）"></a>Safari（iPhone、iPad）</h2><p>设置–&gt;Safari浏览器–&gt;清除历史记录与网站数据</p><h2 id="Chrome-Edge"><a href="#Chrome-Edge" class="headerlink" title="Chrome/Edge"></a>Chrome/Edge</h2><p>1.在地址栏输入<code>chrome://net-internals/#hsts</code></p><p>2.在打开的界面中滑至最后</p><img src="/2021/02/10/%E8%A7%A3%E5%86%B3%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BC%BA%E8%A1%8C%E8%B7%B3%E8%BD%ACHTTPS/2.Chrome-2958807.png" class="" title="2.Chrome"><p>3.在 Delete domain security policies 中输入项目的域名,并 Delete 删除</p><p>4.清除浏览器历史记录（非必要，在上述步骤无效时可以试试）</p><p>🔗参考：</p><p><a href="https://www.cnblogs.com/52py/p/10954019.html">浏览器http跳转至https问题</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>浏览器</tag>
      
      <tag>Safari</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux/Mac OS修改Terminal启动问候语</title>
    <link href="/2021/02/08/Linux-Mac-OS%E4%BF%AE%E6%94%B9Terminal%E5%90%AF%E5%8A%A8%E9%97%AE%E5%80%99%E8%AF%AD/"/>
    <url>/2021/02/08/Linux-Mac-OS%E4%BF%AE%E6%94%B9Terminal%E5%90%AF%E5%8A%A8%E9%97%AE%E5%80%99%E8%AF%AD/</url>
    
    <content type="html"><![CDATA[<p>首先还是先放上我的终端，如果应用Oh My Zsh的话效果会更好，不过是岁数大了之后就不喜欢花里胡哨了。</p><img src="/2021/02/08/Linux-Mac-OS%E4%BF%AE%E6%94%B9Terminal%E5%90%AF%E5%8A%A8%E9%97%AE%E5%80%99%E8%AF%AD/1.%E5%90%AF%E5%8A%A8%E7%95%8C%E9%9D%A2.png" class="" title="1.启动界面"><p>1.打开终端，输入下面👇的命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo vim <span class="hljs-regexp">/etc/m</span>otd<br></code></pre></td></tr></table></figure><p>（会提示输入密码，密码不会显示）</p><p>2.打开<a href="http://patorjk.com/software/taag/">Patorjk</a>生成你想要的字符画</p><img src="/2021/02/08/Linux-Mac-OS%E4%BF%AE%E6%94%B9Terminal%E5%90%AF%E5%8A%A8%E9%97%AE%E5%80%99%E8%AF%AD/2.Patorjk.png" class="" title="2.Patorjk"><p>点击最下面的select&amp;copy就以复制</p><p>3.返回刚刚打开的Terminal –&gt; 按键<code>i </code>–&gt;按键<code>⌘</code>+<code>v</code>（如果还想要其他内容的话加到该处即可） –&gt; 按键<code>Esc</code> –&gt;输入<code>:wq</code></p><p>4.重启一下Terminal就可以看到效果</p>]]></content>
    
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Termux修复root权限</title>
    <link href="/2021/02/06/Termux%E4%BF%AE%E5%A4%8Droot%E6%9D%83%E9%99%90/"/>
    <url>/2021/02/06/Termux%E4%BF%AE%E5%A4%8Droot%E6%9D%83%E9%99%90/</url>
    
    <content type="html"><![CDATA[<p>在Termux中使用su时会因目录结构的原因造成许多命令无法正常使用，我尝试过chroot和tsu好像都不能正常使用，最终使用下面的方法正常使用su。</p><p>进入Termux，直接运行下方命令，若未安装wget需要先安装一下。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//m</span>hci.coding.net<span class="hljs-regexp">/p/</span>termux-su<span class="hljs-regexp">/d/m</span>aster<span class="hljs-regexp">/git/</span>tree<span class="hljs-regexp">/master/i</span>nstall.sh &gt;<span class="hljs-regexp">/dev/</span>null <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &amp;&amp; chmod +x install.sh &amp;&amp; ./install.sh<br></code></pre></td></tr></table></figure><p>脚本已克隆到至coding，原项目地址：<a href="https://github.com/xicor22/Sudo-su-Termux">Sudo-su-Termux</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Termux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Termux配置NatFrp实现远程访问服务</title>
    <link href="/2021/02/06/Termux%E9%85%8D%E7%BD%AENatFrp%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1/"/>
    <url>/2021/02/06/Termux%E9%85%8D%E7%BD%AENatFrp%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[<p>1.进入Bin文件夹</p><p>（因为Termux特殊的目录结构，所以bin目录与正常的Linux系统并不一样）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/data/</span>data<span class="hljs-regexp">/com.termux/</span>files<span class="hljs-regexp">/usr/</span>bin<br></code></pre></td></tr></table></figure><p>2.Curl所需安装的frpc程序</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo curl -Lo frpc https:<span class="hljs-regexp">//g</span>etfrp.sh<span class="hljs-regexp">/d/</span>frpc_linux_arm64  <span class="hljs-comment">#64位系统</span><br></code></pre></td></tr></table></figure><p>以上示例为64位系统的程序，如果是其他系统的话需要修改链接:<a href="https://www.natfrp.com/tunnel/download">软件下载</a></p><p>3.安装Frp</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mel">chmod <span class="hljs-number">755</span> frpc<br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">ls</span> frpc<br></code></pre></td></tr></table></figure><img src="/2021/02/06/Termux%E9%85%8D%E7%BD%AENatFrp%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1/1.%E6%AD%A3%E5%B8%B8.png" class="" title="1.正常"><p>出现类似内容时表明安装成功，可以使用下面代码验证，当输出版本号时表明安装成功</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">frpc -v</span><br></code></pre></td></tr></table></figure><p>当需要使用NatFrp时只需要在任意目录执行下方命令即可</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">frpc</span><span class="hljs-meta"> [启动参数]</span><br></code></pre></td></tr></table></figure><p>启动参数在 隧道列表–&gt;隧道–&gt;配置文件 查看</p><p>🔗参考：</p><p><a href="https://doc.natfrp.com/#/?id=sakura-frp-%E5%B8%AE%E5%8A%A9%E6%96%87%E6%A1%A3">Sakura Frp 帮助文档</a></p><p><a href="https://www.sqlsec.com/2018/05/termux.html#toc-heading-13">Termux 高级终端安装使用配置教程</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Frp</tag>
      
      <tag>Android</tag>
      
      <tag>Termux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MacOS Catalina 彻底屏蔽系统更新</title>
    <link href="/2021/02/04/MacOS-Catalina-%E5%BD%BB%E5%BA%95%E5%B1%8F%E8%94%BD%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0/"/>
    <url>/2021/02/04/MacOS-Catalina-%E5%BD%BB%E5%BA%95%E5%B1%8F%E8%94%BD%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<p>Mac OS Bigsur 正式版发布后，Catalina会经常检查更新，不仅会在docker栏出现小红点，当点击苹果菜单时也会有相关的信息，逼死强迫症。通过下面的方法屏蔽后，随意点进系统更新，也不会出现小红点了</p><img src="/2021/02/04/MacOS-Catalina-%E5%BD%BB%E5%BA%95%E5%B1%8F%E8%94%BD%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0/1.%E6%A3%80%E6%9F%A5%E6%9B%B4%E6%96%B0.png" class="" title="1.检查更新"><h2 id="修改host"><a href="#修改host" class="headerlink" title="修改host"></a>修改host</h2><p>1.打开终端（Terminal），输入命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo vim <span class="hljs-regexp">/etc/</span>hosts<br></code></pre></td></tr></table></figure><p>输入密码（密码不会显示，输完直接回车），打开后大概是这个样子的</p><img src="/2021/02/04/MacOS-Catalina-%E5%BD%BB%E5%BA%95%E5%B1%8F%E8%94%BD%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0/2.%E6%89%93%E5%BC%80host.png" class="" title="2.打开host"><p>2.切换到英文输入法，按’i’键，切换到编辑模式（图片所示）</p><img src="/2021/02/04/MacOS-Catalina-%E5%BD%BB%E5%BA%95%E5%B1%8F%E8%94%BD%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0/3.%E7%BC%96%E8%BE%91%E6%A8%A1%E5%BC%8F.png" class="" title="3.编辑模式"><p>3.使用方向键将光标移动至最后–&gt;回车–&gt;将下列代码粘贴进去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">127.0.0.1 swscan.apple.com<br>127.0.0.1 swcdn.apple.com<br>127.0.0.1 swdist.apple.com<br></code></pre></td></tr></table></figure><img src="/2021/02/04/MacOS-Catalina-%E5%BD%BB%E5%BA%95%E5%B1%8F%E8%94%BD%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0/4.%E4%BF%AE%E6%94%B9%E5%90%8E.png" class="" title="4.修改后"><p>修改后应该如上图</p><p>4.保存内容：按’esc’键–&gt;输入’:wq’（使用按键输入，输入后入下图）–&gt;回车</p><img src="/2021/02/04/MacOS-Catalina-%E5%BD%BB%E5%BA%95%E5%B1%8F%E8%94%BD%E7%B3%BB%E7%BB%9F%E6%9B%B4%E6%96%B0/5.%E4%BF%9D%E5%AD%98.png" class="" title="5.保存"><h2 id="去除现有小红点"><a href="#去除现有小红点" class="headerlink" title="去除现有小红点"></a>去除现有小红点</h2><p>打开终端（Terminal），输入命令</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">defaults write com<span class="hljs-selector-class">.apple</span><span class="hljs-selector-class">.systempreferences</span> AttentionPrefBundleIDs <span class="hljs-number">0</span> &amp;&amp; killall Dock<br></code></pre></td></tr></table></figure><p>现在就彻底的屏蔽系统更新了，随意点进系统更新也检查不到了，当想要更新系统时，反向操作，把加入host里面的东西删除就行。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Parallels安装镜像无法检测操作系统的解决</title>
    <link href="/2021/02/04/Parallels%E5%AE%89%E8%A3%85%E9%95%9C%E5%83%8F%E6%97%A0%E6%B3%95%E6%A3%80%E6%B5%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
    <url>/2021/02/04/Parallels%E5%AE%89%E8%A3%85%E9%95%9C%E5%83%8F%E6%97%A0%E6%B3%95%E6%A3%80%E6%B5%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%A7%A3%E5%86%B3/</url>
    
    <content type="html"><![CDATA[<p>最近在Parallels上安装镜像，试验了好几个镜像都提示无法检测操作系统👇</p><img src="/2021/02/04/Parallels%E5%AE%89%E8%A3%85%E9%95%9C%E5%83%8F%E6%97%A0%E6%B3%95%E6%A3%80%E6%B5%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%A7%A3%E5%86%B3/1.%E6%97%A0%E6%B3%95%E6%A3%80%E6%B5%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.png" class="" title="1.无法检测操作系统"><p>研究了好久终于找到了解决办法，方法如下：</p><p>1.进入新建系统后选择‘从镜像文件安装’</p><img src="/2021/02/04/Parallels%E5%AE%89%E8%A3%85%E9%95%9C%E5%83%8F%E6%97%A0%E6%B3%95%E6%A3%80%E6%B5%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%A7%A3%E5%86%B3/2.%E4%BB%8E%E9%95%9C%E5%83%8F%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9.png" class="" title="2.从镜像文件选择"><p>2.选择‘手动选择’，并且找到要安装的镜像</p><img src="/2021/02/04/Parallels%E5%AE%89%E8%A3%85%E9%95%9C%E5%83%8F%E6%97%A0%E6%B3%95%E6%A3%80%E6%B5%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%A7%A3%E5%86%B3/3.%E6%89%8B%E5%8A%A8%E9%80%89%E6%8B%A9.png" class="" title="3.手动选择"><p>3.选择将要安装的系统类型</p><img src="/2021/02/04/Parallels%E5%AE%89%E8%A3%85%E9%95%9C%E5%83%8F%E6%97%A0%E6%B3%95%E6%A3%80%E6%B5%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%A7%A3%E5%86%B3/4.%E7%B3%BB%E7%BB%9F%E7%B1%BB%E5%9E%8B.png" class="" title="4.系统类型"><p>4.不要管提示，选择‘继续’</p><img src="/2021/02/04/Parallels%E5%AE%89%E8%A3%85%E9%95%9C%E5%83%8F%E6%97%A0%E6%B3%95%E6%A3%80%E6%B5%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%A7%A3%E5%86%B3/1.%E6%97%A0%E6%B3%95%E6%A3%80%E6%B5%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F.png" class="" title="1.无法检测操作系统"><p>5.勾选‘安装前设定’</p><img src="/2021/02/04/Parallels%E5%AE%89%E8%A3%85%E9%95%9C%E5%83%8F%E6%97%A0%E6%B3%95%E6%A3%80%E6%B5%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%A7%A3%E5%86%B3/5.%E5%AE%89%E8%A3%85%E5%89%8D%E8%AE%BE%E5%AE%9A.png" class="" title="5.安装前设定"><p>6.滑到最下面，选择‘启动顺序’，勾选‘选择启动时的引导设备</p><img src="/2021/02/04/Parallels%E5%AE%89%E8%A3%85%E9%95%9C%E5%83%8F%E6%97%A0%E6%B3%95%E6%A3%80%E6%B5%8B%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%A7%A3%E5%86%B3/6.%E5%90%AF%E5%8A%A8%E9%A1%BA%E5%BA%8F.png" class="" title="6.启动顺序"><p>现在就能正常的引导系统进入安装界面了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Mac</tag>
      
      <tag>基本技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo好搭档Typora</title>
    <link href="/2021/02/03/Hexo%E5%A5%BD%E6%90%AD%E6%A1%A3Typora/"/>
    <url>/2021/02/03/Hexo%E5%A5%BD%E6%90%AD%E6%A1%A3Typora/</url>
    
    <content type="html"><![CDATA[<blockquote><p>它的功能之强大、设计之冷静、体验之美妙、理念之先进，我认为值得所有笔记应用厂商学习</p><p>——少数派</p></blockquote><p>Typora是一款很优秀的Markdown编辑器（当然，拿来阅读也很错），尤其是它插入图片的非常方便，复制、拖拽、甚至插入网络图片，更重要的是它将图片转化为Markdown形式，并且可以将图片保存在指定文件夹，这个功能根Hexo配合起来简直不要太方便。</p><h2 id="基于以上我们可以实现下列功能："><a href="#基于以上我们可以实现下列功能：" class="headerlink" title="基于以上我们可以实现下列功能："></a>基于以上我们可以实现下列功能：</h2><ul><li>使用Typora编写的时候能够方便的插入图片，并且可以实时看到图片</li><li>Typora插入的图片能够实时同步到Hexo</li><li>本地使用<code>hexo server</code>浏览效果时，也能够看到图片</li></ul><h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>1.下载地址：</p><p><a href="https://www.typora.io/">Typora官网</a> 滑到最下面就可以找到下载地址</p><p>2.设置</p><p>①偏好设置–&gt;通用–&gt;启动选项（打开指定目录）–&gt;选择Hexo文章所在目录</p><img src="/2021/02/03/Hexo%E5%A5%BD%E6%90%AD%E6%A1%A3Typora/1.%E5%90%AF%E5%8A%A8%E9%80%89%E9%A1%B9.png" class="" title="1.启动选项"><p>这样每次打开Typora时Hexo的文章就会自动显示在左侧</p><p>②偏好设置–&gt;图像–&gt;插入图片时–&gt;复制到指定路径–&gt;./${filename}</p><img src="/2021/02/03/Hexo%E5%A5%BD%E6%90%AD%E6%A1%A3Typora/2.%E5%9B%BE%E5%83%8F.png" class="" title="2.图像"><p>这个时候在Typora中插入的图片就会保存到Hexo的相关目录</p><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h2><p>1.首先我们需要修改网站的Hexo的配置文件，在本地网站的根目录下，文件名为_config.yml</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-comment"># Writing</span><br><span class="hljs-symbol">post_asset_folder:</span> <span class="hljs-keyword">false</span> --&gt;<span class="hljs-symbol">post_asset_folder:</span> <span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure><p>将Writing下post_asset_folder: false 改为true，以让Hexo读取文件夹中的图片</p><p>2.这个时候我们启动hexo server还是不能在网页中显示图片，我们通过安装hexo-image-link插件来解决</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">npm install hexo-<span class="hljs-built_in">image</span>-link --<span class="hljs-built_in">save</span><br></code></pre></td></tr></table></figure><p>现在我们再通过下面的代码生成一篇文章时在source/_posts路径下就会生成一个同名文件夹，使用Typora在该文章中插入图片时，图片就会自动保存到该文件夹中</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type"></span>[name]<br></code></pre></td></tr></table></figure><p>🔗参考：</p><p><a href="https://www.cnblogs.com/cocowool/p/hexo-image-link.html">Hexo博客写作与图片处理的经验</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次在Mac上安装Hexo并部署到Coding</title>
    <link href="/2021/02/02/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9C%A8Mac%E4%B8%8A%E5%AE%89%E8%A3%85Hexo%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0Coding/"/>
    <url>/2021/02/02/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9C%A8Mac%E4%B8%8A%E5%AE%89%E8%A3%85Hexo%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0Coding/</url>
    
    <content type="html"><![CDATA[<h1 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h1><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>1.首先得安装Xcode Command Line Tools，官方文档说需要先安装Xcode，其实可以不安装，直接通过Xcode Command Line Tools安装包安装，有两种方式：<br>  ①通过我的安装包安装，我的也是从Apple官网下载下来的：<a href="http://share.mhcii.top/%E8%BD%AF%E4%BB%B6/Mac/Command_Line_Tools_for_Xcode_12.4.dmg">MHCII Share</a><br>  ②进入Apple开发者官网下载（需要有Apple开发者账号）：<a href="https://developer.apple.com/">Apple Developer</a></p><p>2.安装Homebrew，可通过下面的脚本安装，脚本托管于码云，速度很快</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>zsh -c <span class="hljs-string">&quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></code></pre></td></tr></table></figure><p>3.通过brew安装git</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">brew </span><span class="hljs-keyword">install </span>git<br></code></pre></td></tr></table></figure><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">brew install <span class="hljs-keyword">node</span><span class="hljs-title"></span><br></code></pre></td></tr></table></figure><p>如果不出意外的话输入’node’就可以看到node的版本信息了，如果出错请自行百度排除</p><h2 id="安装Hexo-1"><a href="#安装Hexo-1" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">$ npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>$代表需要root权限来执行命令，可预先su进入root根目录，也可使用’sudo npm install -g hexo-cli’来执行</p><h2 id="生成Hexo网站"><a href="#生成Hexo网站" class="headerlink" title="生成Hexo网站"></a>生成Hexo网站</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">cd</span> documents<br><br><span class="hljs-variable">$</span> hexo init blog<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> blog<br><span class="hljs-variable">$</span> npm install<br></code></pre></td></tr></table></figure><p>上述代码中cd后面的目录是你创建的网站所在的目录（现在是在‘文稿’文件夹下）；blog是你创建的网站的目录（可以换成自己需要的名称）<br>不出意外的话现在在文稿文件夹下就生成了blog文件夹，这就是你刚刚生成的Hexo网站目录</p><h2 id="将Hexo运行在本地"><a href="#将Hexo运行在本地" class="headerlink" title="将Hexo运行在本地"></a>将Hexo运行在本地</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">cd documents/blog<br>hexo <span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>不出意外的话你会看到下面的代码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">INFO</span>  Validating config<br><span class="hljs-keyword">INFO</span>  <span class="hljs-keyword">Start</span> processing<br><span class="hljs-keyword">INFO</span>  Hexo <span class="hljs-keyword">is</span> running at http://localhost:<span class="hljs-number">4000</span> . Press Ctrl+C <span class="hljs-keyword">to</span> stop.<br></code></pre></td></tr></table></figure><p>这个时候就说明你的Hexo已经运行成功了，访问<a href="http://localhost:4000/">http://localhost:4000</a>就可以看到你的Hexo页面</p><h1 id="Hexo基本操作"><a href="#Hexo基本操作" class="headerlink" title="Hexo基本操作"></a>Hexo基本操作</h1><h2 id="修改网站基本信息"><a href="#修改网站基本信息" class="headerlink" title="修改网站基本信息"></a>修改网站基本信息</h2><p>使用Finder打开 文稿/blog/_config.yml，按照注释修改，详细可参考官网</p><h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><p>1.进入<a href="https://hexo.io/themes/">Hexo Theme</a>寻找合适的主题<br>2.点击主题标题进入主题GitHub页面<br>3.Readme中有主题的详细安装方法和修改方法，主要有两个步骤：<br>  ①将主题放到 文稿/blog/themes/ 下<br>  ②修改 文稿/blog/_config.yml </p>  <figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">theme</span>:<span class="hljs-meta"> [主题名称]</span><br></code></pre></td></tr></table></figure><p>  👆打开 _config.yml 找到 theme 字段，修改主题名称为安装的主题<br>4.对主题的配置在GitHub页都有详细的说明，按照说明自行修改即可<br>5.打开刚刚的地址<a href="http://localhost:4000/">http://localhost:4000</a>就可以看到主题应用后的效果了</p><h2 id="生成静态页面"><a href="#生成静态页面" class="headerlink" title="生成静态页面"></a>生成静态页面</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> documents/blog <span class="hljs-comment">#进入Hexo网站目录</span><br>hexo clean <span class="hljs-comment">#清除以前生成的内容，第一次可以不运行</span><br>hexo g <span class="hljs-comment">#生成静态页面</span><br></code></pre></td></tr></table></figure><p>这个时候会在 文稿/blog/ 中生成一个public文件夹，这个就是生成的静态html页面文件</p><h1 id="部署至Coding"><a href="#部署至Coding" class="headerlink" title="部署至Coding"></a>部署至Coding</h1><p>（coding其实是依靠腾讯云cos作为部署容器的）</p><h2 id="配置Coding仓库"><a href="#配置Coding仓库" class="headerlink" title="配置Coding仓库"></a>配置Coding仓库</h2><p>1.首次登陆需要创建团队，按提示操作即可</p><img src="/2021/02/02/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9C%A8Mac%E4%B8%8A%E5%AE%89%E8%A3%85Hexo%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0Coding/1.%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE.png" class="" title="1.创建项目"><p>2.登陆后点击 项目–&gt;创建项目–&gt;DevOps项目</p><img src="/2021/02/02/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9C%A8Mac%E4%B8%8A%E5%AE%89%E8%A3%85Hexo%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0Coding/2.devlop%E9%A1%B9%E7%9B%AE.png" class="" title="2.devlop项目"><p>3.代码仓库–&gt;新建代码仓库–&gt;确认</p><img src="/2021/02/02/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9C%A8Mac%E4%B8%8A%E5%AE%89%E8%A3%85Hexo%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0Coding/4.%E6%99%AE%E9%80%9A%E6%96%B0%E5%BB%BA.png" class="" title="4.普通新建"><p>4.复制仓库的git地址</p><img src="/2021/02/02/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9C%A8Mac%E4%B8%8A%E5%AE%89%E8%A3%85Hexo%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0Coding/5.git%E5%9C%B0%E5%9D%80.png" class="" title="5.git地址"><p>5.打开 文稿/blog/_config.yml 滑到最下面找到 deploy，修改deoloy字段</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> https:<span class="hljs-comment">//...  #修改为刚刚复制的地址</span><br><span class="hljs-symbol">  branch:</span> master  <span class="hljs-meta">#仓库名称（如果按我的设置的就为master）</span><br></code></pre></td></tr></table></figure><h2 id="上传网站到Coding"><a href="#上传网站到Coding" class="headerlink" title="上传网站到Coding"></a>上传网站到Coding</h2><p>1.上传前一定要先设置一下账户信息，进入页面之后绑定一个手机号或者邮箱，再设置一下密码</p><img src="/2021/02/02/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9C%A8Mac%E4%B8%8A%E5%AE%89%E8%A3%85Hexo%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0Coding/6.%E4%B8%AA%E4%BA%BA%E8%AE%BE%E7%BD%AE.png" class="" title="6.个人设置"><p>2.上传代码到coding</p>  <figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd documents<span class="hljs-regexp">/blog/</span><br>hexo d<br></code></pre></td></tr></table></figure><p>  接下来输入账号（就是刚刚绑定的手机号或者邮箱）<br>  输入密码（刚刚设置的密码）</p><h2 id="部署静态网站"><a href="#部署静态网站" class="headerlink" title="部署静态网站"></a>部署静态网站</h2><p>1.持续部署–&gt;静态网站</p><img src="/2021/02/02/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9C%A8Mac%E4%B8%8A%E5%AE%89%E8%A3%85Hexo%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0Coding/7.%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2.png" class="" title="7.持续部署"><p>2.依次完成三步认证</p><img src="/2021/02/02/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9C%A8Mac%E4%B8%8A%E5%AE%89%E8%A3%85Hexo%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0Coding/8.%E6%96%B0%E5%BB%BA%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99.png" class="" title="8.新建静态网站"><p>3.根据自己需要设置网站信息</p><img src="/2021/02/02/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%9C%A8Mac%E4%B8%8A%E5%AE%89%E8%A3%85Hexo%E5%B9%B6%E9%83%A8%E7%BD%B2%E5%88%B0Coding/9.%E7%BD%91%E7%AB%99%E4%BF%A1%E6%81%AF.png" class="" title="9.网站信息"><p>4.根据需要绑定域名</p><p>🔗参考：</p><p><a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a></p><p><a href="https://blog.csdn.net/bwqiang/article/details/105871955">将Hexo博客部署到Coding(码云)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Winserver通过远程桌面传文件</title>
    <link href="/2021/01/30/Winserver%E9%80%9A%E8%BF%87%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <url>/2021/01/30/Winserver%E9%80%9A%E8%BF%87%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%BC%A0%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="Mac-Os"><a href="#Mac-Os" class="headerlink" title="Mac Os"></a>Mac Os</h2><p>1.首先在Mac上安装Microsoft remote desktop</p><p>如果有美区账号可以直接在Appstore安装，如果没有可以使用我上传的版本</p><p>2.连接到你的winserver，连接后如下图</p><img src="/2021/01/30/Winserver%E9%80%9A%E8%BF%87%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%BC%A0%E6%96%87%E4%BB%B6/1.%E8%BF%9E%E6%8E%A5%E7%95%8C%E9%9D%A2.png" class="" title="1.连接界面"><p>3.选中winserver主机，点击edit进入编辑界面</p><img src="/2021/01/30/Winserver%E9%80%9A%E8%BF%87%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%BC%A0%E6%96%87%E4%BB%B6/2.%E7%BC%96%E8%BE%91%E7%95%8C%E9%9D%A2.png" class="" title="2.编辑界面"><p>4.按照步骤点击相关位置，添加文件夹</p><img src="/2021/01/30/Winserver%E9%80%9A%E8%BF%87%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%BC%A0%E6%96%87%E4%BB%B6/3.%E9%80%89%E6%8B%A9%E6%96%87%E4%BB%B6%E5%A4%B9.png" class="" title="3.选择文件夹"><p>5.最后就可以在你的winserver上看到MacBook上面共享的文件夹了</p><img src="/2021/01/30/Winserver%E9%80%9A%E8%BF%87%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%BC%A0%E6%96%87%E4%BB%B6/4.winserver%E7%95%8C%E9%9D%A2.png" class="" title="4.winserver界面"><h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>1.win+s打开搜索，输入‘远程桌面’，打开远程桌面连接</p><img src="/2021/01/30/Winserver%E9%80%9A%E8%BF%87%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%BC%A0%E6%96%87%E4%BB%B6/5.%E6%89%93%E5%BC%80%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2.png" class="" title="5.打开远程桌面"><p>2.点击本地资源，后点击详细信息</p><img src="/2021/01/30/Winserver%E9%80%9A%E8%BF%87%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%BC%A0%E6%96%87%E4%BB%B6/6.%E8%AF%A6%E7%BB%86%E4%BF%A1%E6%81%AF.png" class="" title="6.详细信息"><p>3.选择需要共享到服务器的盘符</p><img src="/2021/01/30/Winserver%E9%80%9A%E8%BF%87%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E4%BC%A0%E6%96%87%E4%BB%B6/7.%E6%B7%BB%E5%8A%A0%E7%9B%98%E7%AC%A6.png" class="" title="7.添加盘符"><p>⚠️：在Winserver上建议使用ctrl+c复制后粘贴到Winserver后再打开，否则有可能会卡死（尤其是小带宽的服务器）</p><p>🔗参考：</p><p><a href="https://www.jianshu.com/p/e3fab8559f54">Mac 使用microsoft Remote Desktop 远端连接本地文件夹</a></p><p><a href="https://www.cnblogs.com/ysocean/p/6675025.html">本机向windows服务器传输文件的三种方法</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Server</tag>
      
      <tag>Win</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用ssh连接到WSL</title>
    <link href="/2021/01/28/%E4%BD%BF%E7%94%A8ssh%E8%BF%9E%E6%8E%A5%E5%88%B0WSL/"/>
    <url>/2021/01/28/%E4%BD%BF%E7%94%A8ssh%E8%BF%9E%E6%8E%A5%E5%88%B0WSL/</url>
    
    <content type="html"><![CDATA[<h1 id="WSL端设置"><a href="#WSL端设置" class="headerlink" title="WSL端设置"></a>WSL端设置</h1><p>1.安装ssh服务（Ubuntu虽然自带了，但是启动服务时会报错，仍然需要运行下面的命令重新安装）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt install openssh-server<br></code></pre></td></tr></table></figure><p>2.修改ssh配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo vim /etc/ssh/sshd_config <span class="hljs-comment">#打开sshd编辑文件</span><br><br>13 <span class="hljs-comment">#Port 22 -&gt; Port [你想设置的ssh端口]                      #13行，修改sshd端口</span><br>56 <span class="hljs-comment">#PasswordAuthentication no -&gt;PasswordAuthentication yes #56行，允许密码登陆ssh</span><br></code></pre></td></tr></table></figure><p>3.到你的服务器控制台打开刚刚设置的端口</p><p>4.进入winserver的Windows Defender防火墙打开刚刚设置的端口</p><p>5.启动ssh服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo /etc/init.d/ssh stop <span class="hljs-comment">#停止ssh服务</span><br>sudo /etc/init.d/ssh start <span class="hljs-comment">#启动ssh服务</span><br>sudo /etc/init.d/ssh restart <span class="hljs-comment">#重启ssh服务</span><br></code></pre></td></tr></table></figure><h1 id="ssh连接"><a href="#ssh连接" class="headerlink" title="ssh连接"></a>ssh连接</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">ssh -p [刚刚设置的端口] [用户名]@[ip地址]<br></code></pre></td></tr></table></figure><p>🔗参考：</p><p><a href="https://www.cnblogs.com/seekwind/p/10256262.html">Windows子系统linuxwsl开启ssh服务</a></p><p><a href="https://blog.csdn.net/jackghq/article/details/54974141">Ubuntu开启SSH服务远程登录</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>SSL</tag>
      
      <tag>WSL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用adb修改安卓手机分辨率</title>
    <link href="/2021/01/18/%E4%BD%BF%E7%94%A8adb%E4%BF%AE%E6%94%B9%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E5%88%86%E8%BE%A8%E7%8E%87/"/>
    <url>/2021/01/18/%E4%BD%BF%E7%94%A8adb%E4%BF%AE%E6%94%B9%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E5%88%86%E8%BE%A8%E7%8E%87/</url>
    
    <content type="html"><![CDATA[<p>1.前提条件：①电脑已经安装adb；②手机连接电脑，并且已经开启‘开发人员调试工具’</p><p>2.代码如下</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-number">1</span>.修改为指定分辨率<br>#分辩率中的乘号即为小写字母x<br>adb shell wm size <span class="hljs-number">1080</span>x1920<br>adb shell wm size <span class="hljs-number">1080</span>x2340<br><span class="hljs-number">2</span>.恢复为默认分辨率<br>adb shell wm size reset<br></code></pre></td></tr></table></figure><p>🔗参考：</p><p><a href="https://www.jianshu.com/p/da563d019053">Android 通过adb修改屏幕分辨率</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>ADB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac安装Homebrew</title>
    <link href="/2021/01/14/Mac%E5%AE%89%E8%A3%85Homebrew/"/>
    <url>/2021/01/14/Mac%E5%AE%89%E8%A3%85Homebrew/</url>
    
    <content type="html"><![CDATA[<p>直接打开Terminal输入下方代码按提示操作就行,脚本托管于码云，国内访问速度很快。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>zsh -c <span class="hljs-string">&quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></code></pre></td></tr></table></figure><p>🔗参考：</p><p><a href="https://gitee.com/cunkai/HomebrewCN/">HomebrewCN</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Mac</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
